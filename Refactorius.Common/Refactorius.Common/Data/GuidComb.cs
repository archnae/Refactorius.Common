using System;

namespace Refactorius.Data
{
    /// <summary>The sequential <see cref="Guid"/> generator (Guid.COMB - a COMBination of an ordinary GUID and the current
    /// datetime).</summary>
    /// <remarks>This Guid generator returns sequential Guids. The why's, how's, and perf tests are in Jimmy Nilsson's article
    /// <see href="http://www.informit.com/articles/article.asp?p=25862"/>.
    /// <para>It appears that NHibernate uses the implementation described in that article and reproduced below. We do not know
    /// about the perf characteristics of Guid.Comb vs. Guid in databases other than MS SQL Server.</para>
    /// <para>The current datetime should be in SQL Server format. That is days after 1st of Jan 1900 and the no of
    /// milliseconds after midnight, divided by 3.3333. It is the lowest six bytes of the GUID that get exchanged for the
    /// current datetime.</para>
    /// <para>NAE: Boldly stolen from <see href="http://www.ideablade.com/techtip_improve_your_guid.htm "/>.</para>
    /// </remarks>
    public static class GuidComb
    {
        /// <summary>The baseline <see cref="DateTime"/>.</summary>
        private static readonly DateTime _baseDate = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);

        /// <summary>The baseline <see cref="DateTime"/> in ticks.</summary>
        private static readonly long _baseDateInTicks = _baseDate.Ticks;


        /// <summary>Creates a new sequential <see cref="Guid"/>.</summary>
        /// <returns>A new sequential <see cref="Guid"/>.</returns>
        /// <remarks>Version by glapointe, Aug 16, 2002
        /// <see href="http://www.informit.com/discussion/index.asp?postid=a8275a70-0698-46f0-8c8f-bf687464628c&amp;rl=1"/> This
        /// one purports to "match exactly (or pretty darn close) the combs created in SQL Server." However, I modified slightly to
        /// use UtcNow and static BaseDate values. UtcNow gives cross-timezone ordering of records inserted with Guid.Comb keys.</remarks>
        [Obsolete("Deprecated for direct calls, use GuidSeq")]
        public static Guid NewGuid()
        {
            var guidArray = Guid.NewGuid().ToByteArray();

            var now = DateTime.UtcNow; // was: DateTime now = DateTime.Now; 

            // Get the days and milliseconds which will be used to build the byte string
            var days = new TimeSpan(now.Ticks - _baseDateInTicks);
            var msecs = new TimeSpan(now.Ticks - new DateTime(now.Year, now.Month, now.Day).Ticks);

            // Convert days and msecs to byte arrays
            // SQL Server is accurate to 1/300th of a millisecond
            // .NET DateTime ticks are in milliseconds
            // so we divide .NET ticks by 3.333333
            var daysArray = BitConverter.GetBytes(days.Days);
            var msecsArray = BitConverter.GetBytes((long) (msecs.TotalMilliseconds / 3.333333));

            // Reverse the bytes to match SQL Servers ordering
            Array.Reverse(daysArray);
            Array.Reverse(msecsArray);

            // Copy the bytes into the guid
            Array.Copy(daysArray, daysArray.Length - 2, guidArray, guidArray.Length - 6, 2);
            Array.Copy(msecsArray, msecsArray.Length - 4, guidArray, guidArray.Length - 4, 4);

            return new Guid(guidArray);
        }

        /// <summary>Extract datetime part of a <see cref="Guid"/> generated by <see cref="GuidComb"/>.</summary>
        /// <param name="value">A <see cref="Guid"/> generated by <see cref="GuidComb"/>.</param>
        /// <returns>The <see cref="DateTime"/> part of <paramref name="value"/>.</returns>
        /// <remarks>Please note: this function returns the date in UTC; you may want to convert back to local time with
        /// <code>GetDateFromComb(aGuidComb).ToLocalTime().</code></remarks>
        public static DateTime GetDateFromComb(Guid value)
        {
            var daysArray = new byte[4];
            var msecsArray = new byte[4];
            var guidArray = value.ToByteArray();

            // Copy the date parts of the guid to the respective byte arrays.
            Array.Copy(guidArray, guidArray.Length - 6, daysArray, 2, 2);
            Array.Copy(guidArray, guidArray.Length - 4, msecsArray, 0, 4);

            // Reverse the arrays to put them into the appropriate order
            Array.Reverse(daysArray);
            Array.Reverse(msecsArray);

            // Convert the bytes to ints
            var days = BitConverter.ToInt32(daysArray, 0);
            var msecs = BitConverter.ToInt32(msecsArray, 0);

            var date = _baseDate.AddDays(days);
            date = date.AddMilliseconds(msecs * 3.333333);

            // remember, we use UTC time in NewGuid()
            return date;
        }
    }
}