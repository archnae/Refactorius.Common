using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Text.RegularExpressions;

namespace Refactorius.Data;

/// <summary>A collection of useful utils not yet deserving their own place.</summary>
[PublicAPI]
public static class MiscUtils
{
    /// <summary>Validates a BSN.</summary>
    /// <param name="value">A BSN string.</param>
    /// <returns><see langword="true"/> if <paramref name="value"/> is a valid BSN nummer (8 or 9 digits, 11-proof), otherwise
    /// <see langword="false"/>.</returns>
    public static bool IsValidBsn(string? value)
    {
        var bsn = value.SqueezeToNull();
        if (bsn == null)
            return false;

        if (bsn.Length < 9)
            bsn = "0" + bsn;
        if (bsn.Length != 9)
            return false;

        var sum = 0;

        for (var i = 0; i < 9; i++)
        {
            if (!int.TryParse(bsn.Substring(i, 1), out int digit))
                return false;
            sum += digit * (9 - i) * (i == 8 ? -1 : 1);
        }

        return sum % 11 == 0;
    }

    /// <summary>Validates a postcode.</summary>
    /// <param name="postcode">A postcode string.</param>
    /// <returns><see langword="true"/> if <paramref name="postcode"/> is a valid postcode nummer (4 digits + 2 letters),
    /// otherwise <see langword="false"/>.</returns>
    public static bool IsValidPostcode(string? postcode)
    {
        postcode = postcode.TrimToNull();
        if (postcode == null)
            return false;

        postcode = postcode.Replace(" ", string.Empty).ToUpperInvariant();
        if (postcode.Length != 6)
            return false;

        return char.IsDigit(postcode[0])
               && char.IsDigit(postcode[1])
               && char.IsDigit(postcode[2])
               && char.IsDigit(postcode[3])
               && char.IsLetter(postcode[4])
               && char.IsLetter(postcode[5]);
    }

    /// <summary>Converts automatically generated by VS build and revision numbers to the build <see cref="DateTime"/>.</summary>
    /// <param name="version">A version with autogenerated build and regvision parts.</param>
    /// <returns>The build date and time or <see langword="null"/> if impossible to determine.</returns>
    /// <remarks>See http://blog.mbcharbonneau.com/2007/03/13/auto-incrementing-build-numbers-in-visual-studio/ for details.</remarks>
    public static DateTime? VersionToDate(this Version version)
    {
        version.MustNotBeNull(nameof(version));

        var dt = new DateTime(2000, 1, 1).AddDays(version.Build).AddSeconds(version.Revision * 2);
        try
        {
            if (dt.Year < 2013 || dt.Year > 2019)
            {
                var y = version.Revision / 10000;
                var m = version.Revision / 100 % 100;
                var d = version.Revision % 100;
                if (d > 0 && d <= 31 && m > 0 && m <= 12 && y > 2013 && y <= 2020)
                    dt = new DateTime(version.Revision / 10000, version.Revision / 100 % 100,
                        version.Revision % 100);
                else
                    return null;
            }
        }
        catch (ArgumentOutOfRangeException)
        {
            return null;
        }

        // treat all builds out of 2012-2019 range as manually numbered
        return dt.Year >= 2013 && dt.Year <= 2019
            ? dt
            : (DateTime?) null;
    }

    /// <summary>Converts automatically generated by VS build and revision numbers to the string representation.</summary>
    /// <param name="version">A version with autogenerated build and regvision parts.</param>
    /// <returns>The string with version, build and build date and time.</returns>
    public static string VersionToDatedString(this Version version)
    {
        var dt = version.VersionToDate();
        var s = dt.HasValue
            ? " on " + dt.Value.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)
            : string.Empty;

        return "version {0}.{1} build {2}.{3}{4}".SafeFormat(
            CultureInfo.InvariantCulture,
            version.Major,
            version.Minor,
            version.Build,
            version.Revision,
            s);
    }

    /// <summary>Retrieves the build version (containing the build date) of the assembly of a specified <c>Type</c>.</summary>
    /// <param name="type">A <c>Type</c> from the main application assembly.</param>
    /// <returns>The build <see cref="Version"/> of the <paramref name="type"/>.</returns>
    public static Version GetBuildVersion(this Type type)
    {
        type.MustNotBeNull(nameof(type));
        return type.Assembly.GetName().Version ?? new Version();
    }

    /// <summary>Retrieves the product version (containing the official revision/build numbers) of the assembly of a specified
    /// <c>Type</c>.</summary>
    /// <param name="type">A <c>Type</c> from the main application assembly.</param>
    /// <returns>The product <see cref="Version"/> of the <paramref name="type"/>.</returns>
    /// <remark>the <paramref name="type"/> must belong to the main application assembly (.exe or .dll), not to a referenced
    /// library that could be embedded as resource or dynamic w/o location.</remark>
    [SecuritySafeCritical]
    public static Version GetProductVersion(this Type type)
    {
        type.MustNotBeNull(nameof(type));
        try
        {
            try
            {
#if NETSTANDARD
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        new PermissionSet(PermissionState.Unrestricted).Assert();
#endif
                var location = type.Assembly.Location;
                if (string.IsNullOrEmpty(location))
                    return type.Assembly.GetName().Version ?? new Version();
                var pv = FileVersionInfo.GetVersionInfo(location).ProductVersion ?? "0.0.0.0";
                pv = Regex.Replace(pv, @"[^0-9.]+", string.Empty);
                return new Version(pv);
            }
            finally
            {
#if NETSTANDARD
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        PermissionSet.RevertAssert();
#endif
            }
        }
        catch (FileNotFoundException)
        {
            return type.GetBuildVersion();
        }
    }

    /// <summary>Converts a string into HTML representation.</summary>
    /// <param name="value">A string.</param>
    /// <returns>Valid HTML for <paramref name="value"/>.</returns>
    public static string Htmlize(this string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return string.Empty;

        return value
            .SplitAndTrim(Environment.NewLine)
            .Select(ConvertUtils.EscapeXml)
            .ToArray()
            .Join("<br/>");
    }
}