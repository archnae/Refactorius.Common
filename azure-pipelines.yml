# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: 'vs2017-win2016'

variables:
  BuildConfiguration: 'Debug'
  VersionSuffix: 'pre$(Build.BuildNumber)'
  home: Refactorius.Common

name: $(Build.BuildId)

trigger: none

steps:

- script: type azure-pipelines.yml
  name: show
  displayName: 'Show yaml source in $(Build.SourceBranchName)'

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Unset VersionSuffix if Master branch'
  condition: eq(variables['Build.SourceBranchName'], 'master')
  inputs:
    VariableName: VersionSuffix
    Value: ''

- task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-set.VariableSetTask@1
  displayName: 'Set buildConfiguration to Release if Master branch'
  condition: eq(variables['Build.SourceBranchName'], 'master')
  inputs:
    VariableName: BuildConfiguration
    Value: 'Release'

- task: DotNetCoreCLI@2
  name: restore
  displayName: 'Restore packages'
  inputs:
    command: restore
    projects: $(home).sln
    feedsToUse : config
    nugetConfigPath: nuget.config
    
- task: DotNetCoreCLI@2
  name: build
  displayName: 'Build all projects with version suffix $(VersionSuffix)'
  inputs:
    command: build
    projects: $(home).sln
    norestore: true
    arguments: '--configuration $(BuildConfiguration) /p:VersionSuffix=$(VersionSuffix)'

- task: DotNetCoreCLI@2
  name: test
  displayName: 'Run tests'
  inputs:
    command: test
    projects: $(home)/tests/*.csproj
    nobuild: true
    publishTestResults: true

- task: DotNetCoreCLI@2
  name: pack
  displayName: 'Pack library'
  inputs:
    command: pack
    projects: $(home)/src/Refactorius.Common.csproj
    nobuild: true
    norestore: true
    arguments: -c "$(BuildConfiguration)" -o "$(Build.ArtifactStagingDirectory)

- task: DotNetCoreCLI@2
  name: push
  displayName: 'Push library to Reactorius artefacts'
  inputs:
    command: push
    nuGetFeedType: internal
    packagesToPush: $(build.artifactStagingDirectory)/*.nupkg
    publishVstsFeed: RefactoriusPackages

- task: NuGetCommand@2
   displayName: 'Push library to NuGet.org'
   condition: eq(variables['BuildConfiguration'], 'Release')
   inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: $(build.artifactStagingDirectory)/*.nupkg
    externalFeedCredentials: 'Nuget.Refactorius'
    versioningScheme: byBuildNumber
   
